var:
  domain_name: root
  domain_owner: admin
  username: stark
  mongo_init_file_path: $HOME/dev-initializer/init_db.js

env:
  environment: dev

tasks:
  - name: Initialize Mongo
    id: mongo
    uses: "@modules/shell"
    spec:
      run: |
        mongo --host mongo:27017 \
        --username mongouser \
        --password mongopassword < ${{ var.mongo_init_file_path }}

  - name: Create Domain
    id: domain
    uses: "@modules/resource"
    spec:
      resource_type: identity.Domain
      data:
        name: ${{ var.domain_name }}
      matches:
        - name
      mode: NO_UPDATE

  - name: Create DomainOwner
    id: domain_owner
    uses: "@modules/resource"
    spec:
      resource_type: identity.DomainOwner
      data:
        name: Domain Admin
        owner_id: ${{ var.domain_owner }}
        password: ${{ var.domain_owner }}
        domain_id: ${{ tasks.domain.output.domain_id }}
      matches:
        - domain_id
      mode: NO_UPDATE
      verb:
        read: get


  - name: Create DomainOwner Token
    id: domain_owner_token
    uses: "@modules/resource"
    spec:
      resource_type: identity.Token
      data:
        credentials:
          user_type: DOMAIN_OWNER
          user_id: ${{ tasks.domain_owner.spec.data.owner_id }}
          password: ${{ tasks.domain_owner.spec.data.password }}
        domain_id: ${{ tasks.domain.output.domain_id }}
      mode: EXEC
      verb:
        exec: issue

  - name: Update spacectl configure
    id: shell
    uses: "@modules/shell"
    spec:
      run: |
        spacectl config set api_key ${{ tasks.domain_owner_token.output.access_token }}

  - name: Create admin user
    id: admin_user
    uses: "@modules/resource"
    spec:
      resource_type: identity.User
      data:
        user_id: ${{ var.username }}
        domain_id: ${{ tasks.domain.output.domain_id }}
      matches:
        - user_id
        - domain_id

  - name: Create admin user API(Domain) key
    id: admin_user_api_key
    uses: "@modules/resource"
    spec:
      resource_type: identity.APIKey
      data:
        user_id: ${{ tasks.admin_user.output.user_id }}
        domain_id: ${{ tasks.domain.output.domain_id }}
        api_key_type: DOMAIN
      matches:
        - user_id
        - domain_id
      mode: EXEC
      verb:
        exec: create
#
  - name: Create Repository
    id: repository
    uses: "@modules/resource"
    spec:
      resource_type: repository.Repository
      data:
        domain_id: ${{ tasks.domain.output.domain_id }}
        name: ${{ var.domain_name }}
        repository_type: local
      matches:
        - domain_id
        - name
      mode: NO_UPDATE
      verb:
        create: register


  - name: Publish Supervisor
    id: supervisor
    uses: "@modules/resource"
    spec:
      resource_type: plugin.Supervisor
      data:
        domain_id: ${{ tasks.domain.output.domain_id }}
        name: ${{ var.domain_name }}
        hostname: default.svc.cluster.local
        tags:
      matches:
        - domain_id
        - name
      mode: NO_UPDATE
      verb:
        create: publish

  - name: Create a Supervisor API Key
    id: supervisor_api_key
    uses: "@modules/resource"
    spec:
      resource_type: identity.APIKey
      data:
        domain_id: ${{ tasks.domain.output.domain_id }}
        user_id: ${{ var.username }}
        api_key_type: USER
      matches:
        - domain_id
      mode: EXEC
      verb:
        exec: create

  - name: Consul Supervisor API Key
    uses: "@modules/shell"
    spec:
      run: |
        curl -X PUT http://consul/v1/kv/debug/supervisor/TOKEN -d '${{ tasks.supervisor_api_key.output.api_key }}'

  - name: Create EC2 Plugin
    id: ec2_plugin
    uses: "@modules/resource"
    spec:
      resource_type: repository.Plugin
      data:
        domain_id: ${{ tasks.domain.output.domain_id }}
        name: ec2
        service_type: inventory.collector
        image: spaceone/aws-ec2
      mode: EXEC
      verb:
        exec: register

  - name: Install EC2 Plugin
    id: install_ec2_plugin
    uses: "@modules/resource"
    spec:
      resource_type: plugin.Plugin
      data:
        domain_id: ${{ tasks.domain.output.domain_id }}
        version: "1.3"
        plugin_id: ${{ tasks.ec2_plugin.output.plugin_id }}
        labels: {}
      mode: EXEC
      verb:
        exec: get_plugin_endpoint